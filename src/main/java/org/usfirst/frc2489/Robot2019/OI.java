// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2489.Robot2019;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc2489.Robot2019.commands.*;
import org.usfirst.frc2489.Robot2019.subsystems.*;

import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick leftJoystick;
    public Joystick rightJoystick;
    public Joystick armJoystick;
    public JoystickButton rightTrigger;
    public JoystickButton leftTrigger;    
    public JoystickButton rightButton12; 
    public JoystickButton rightButton11;
    public JoystickButton leftButton6;
    public JoystickButton leftButton3;    
    public JoystickButton leftButton4;    
    public JoystickButton rightButton5;
    public JoystickButton rightButton9;
    public JoystickButton rightButton10;
    public JoystickButton rightButton2;  
    public JoystickButton rightButton3;     
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        rightJoystick = new Joystick(1);
        
        leftJoystick = new Joystick(0);

        armJoystick = new Joystick(2);
        
        rightTrigger = new JoystickButton(rightJoystick, 1);
        // button1.whenPressed(new DriveStraight(0.5, 1) );
        // rightTrigger.whenPressed(new DriveInSquare() );
        // rightTrigger.whenPressed(new TurnPixy(0.5, 20) );

        //rightTrigger.whenPressed(new DriveWithJevoice(0.25, 0.08, 5) );

        //rightTrigger.whenPressed(new DriveTurnSonarAlign(0.7 , 8) );
        //rightTrigger.whenPressed(new DrivePixySonarStop(0.5, 0.1 , 10, 20) );
        //rightTrigger.whenPressed(new DrivePixyProximityStop(0.5, 0.1 , 10) );
        rightTrigger.whenPressed(new DriveWithJoysticks() );
        
        leftTrigger = new JoystickButton(leftJoystick, 1);
        leftTrigger.whenPressed(new BallPush() );

        rightButton12 = new JoystickButton(rightJoystick, 12);
        // button1.whenPressed(new DriveStraight(0.5, 1) );
        //rightButton12.whenPressed(new DriveZigZag(0.8, 0.9) );
        rightButton12.whenPressed(new DriveTurnSonarAlign(0.5 , 3) );
        
        rightButton11 = new JoystickButton(leftJoystick, 11);
        rightButton11.whenPressed(new DriveTurnAngle2(-0.8, -90) );   
        
        rightButton5 = new JoystickButton(rightJoystick, 5);
        rightButton5.whenPressed(new DriveTurnAngle2(0.8, 90) );
        
        leftButton6 = new JoystickButton(leftJoystick, 6);
        leftButton6.whenPressed(new DriveTurnAngle2(-0.8, -90) );
 
        leftButton3 = new JoystickButton(leftJoystick, 3);
        //leftButton3.whenPressed(new DriveFollowLine(0.0, 0.2, -1) );
        leftButton3.whenPressed(new HatchRelease() );
        
        leftButton4 = new JoystickButton(leftJoystick, 4);
        leftButton4.whenPressed(new DriveFollowLine(0.0, 0.2, 1) );        
        
        rightButton9 = new JoystickButton(rightJoystick, 9);
        //rightButton9.whenPressed(new SolenoidControl(DoubleSolenoid.Value.kForward ) );
        rightButton9.whenPressed(new TurnPixy(0.5, 10));
        
        rightButton10 = new JoystickButton(rightJoystick, 10);
//      rightButton10.whenPressed(new SolenoidControl(DoubleSolenoid.Value.kReverse  ) ); 
        
        rightButton2 = new JoystickButton(rightJoystick, 2); 

        rightButton3 = new JoystickButton(rightJoystick, 3);
        rightButton3.whenPressed(new HatchGrab());
        
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("DriveWithJoysticks", new DriveWithJoysticks());
        //SmartDashboard.putData("DriveStraight", new DriveStraight(0.5, 1.0));
        //SmartDashboard.putData("DriveTurn", new DriveTurn(0.5, 1.0));
        SmartDashboard.putData("DriveInSquare", new DriveInSquare());
        SmartDashboard.putData("TurnPixy", new TurnPixy(0.5, 10));
        SmartDashboard.putData("DrivePixy", new DrivePixy(0.5, 0.1, 10));
        SmartDashboard.putData("DriveTrunSonarAlign", new DriveTurnSonarAlign(0.7 , 5));
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getLeftJoystick() {
        return leftJoystick;
    }

    public Joystick getRightJoystick() {
        return rightJoystick;
    }

    public Joystick getArmJoystick() {
        return armJoystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

